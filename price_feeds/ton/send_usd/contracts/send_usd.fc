#include "imports/stdlib.fc";

;; Storage variables
global int ctx_id;
global slice ctx_pyth_address;

const WORKCHAIN = 0;
const OP_SEND_USD = 1;
const PYTH_OP_PARSE_PRICE_FEED_UPDATES = 5;
const TON_PRICE_FEED_ID = 0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026;
const ERROR_UNAUTHORIZED = 401;

;; Load contract data from storage
() load_data() impure {
    var ds = get_data().begin_parse();
    ctx_pyth_address = ds~load_msg_addr();
    ds.end_parse();
}

;; Save contract data to storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(ctx_pyth_address)
            .end_cell()
    );
}

;; Helper to send TON with a comment
() send_ton(slice recipient, int amount) impure {
    cell msg = begin_cell()
        .store_uint(0x18, 6)                        ;; nobounce
        .store_slice(recipient)                     ;; destination address
        .store_coins(amount)                        ;; amount to send
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers
        .store_uint(0, 32)                          ;; op = 0 for comment
        .end_cell();
    
    send_raw_message(msg, 0);
}

;; Helper to send message to Pyth contract
() request_price_feed(int msg_value, int query_id, slice recipient, int usd_amount, cell price_update_data) impure {
    ;; Create price IDs cell
    cell price_ids = begin_cell()
        .store_uint(1, 8)   
        .store_uint(TON_PRICE_FEED_ID, 256)
        .end_cell();

    ;; Create custom payload with unique query ID to identify response
    cell custom_payload = begin_cell()
        .store_uint(query_id, 64)
        .store_slice(recipient)
        .store_uint(usd_amount, 16)
        .end_cell();


    int compute_fee = get_compute_fee(WORKCHAIN, gas_consumed());
    int forward_amount = msg_value - compute_fee;

    ;; Create message to Pyth contract according to schema
    cell msg = begin_cell()
        .store_uint(0x18, 6)                              ;; nobounce
        .store_slice(ctx_pyth_address)                    ;; pyth contract address
        .store_coins(forward_amount)                      ;; forward amount minus fees
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)       ;; default message headers
        .store_uint(PYTH_OP_PARSE_PRICE_FEED_UPDATES, 32) ;; pyth opcode
        .store_ref(price_update_data)                     ;; update data
        .store_ref(price_ids)                             ;; price feed IDs
        .store_uint(now() - 100, 64)                      ;; min_publish_time
        .store_uint(now() + 100, 64)                      ;; max_publish_time
        .store_slice(my_address())                        ;; target address (this contract)
        .store_ref(custom_payload)                        ;; custom payload with recipient and amount
        .end_cell();

    send_raw_message(msg, 0);
}

;; Main message handler
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    ;; Get sender address from message
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);  ;; skip flags
    slice sender_address = cs~load_msg_addr();  ;; load sender address
    
    load_data();

    int op = in_msg_body~load_uint(32);
    
    if (op == OP_SEND_USD) {
        int query_id = in_msg_body~load_uint(64); ;; Unique ID for this request
        slice recipient = in_msg_body~load_msg_addr();
        int usd_amount = in_msg_body~load_uint(16);
        cell price_update = in_msg_body~load_ref();
        
        ;; Request price from Pyth with recipient and amount in custom payload
        request_price_feed(msg_value, query_id, recipient, usd_amount, price_update);
        return ();
    }

    if (op == PYTH_OP_PARSE_PRICE_FEED_UPDATES) {
        ;; Check if sender is the official Pyth contract
        throw_unless(ERROR_UNAUTHORIZED, equal_slices_bits(sender_address, ctx_pyth_address));
        
        int num_price_feeds = in_msg_body~load_uint(8);
        
        cell price_feeds_cell = in_msg_body~load_ref();
        
        slice price_feeds = price_feeds_cell.begin_parse();
        int price_id = price_feeds~load_uint(256);
        cell price_data = price_feeds~load_ref();
        slice price_data_s = price_data.begin_parse();
        cell current_price_cell = price_data_s~load_ref();
        slice current_price_s = current_price_cell.begin_parse();
        int price = current_price_s~load_int(64);     
        int conf = current_price_s~load_uint(64);     
        int expo = current_price_s~load_int(32);      
        int timestamp = current_price_s~load_uint(64); 

        ;; Load sender address and custom payload
        slice sender = in_msg_body~load_msg_addr();
        cell custom_payload = in_msg_body~load_ref();
        slice cp = custom_payload.begin_parse();

        int query_id = cp~load_uint(64);
        slice recipient = cp~load_msg_addr();
        int usd_amount = cp~load_uint(16);
        
        int decimals = 1;
        repeat((0 - expo)) {
            decimals = decimals * 10;
        }
        
        ;; Calculate: (1e9 * decimals * usd_amount) / price
        int ton_amount = ((1000000000 * decimals * usd_amount) / price);
        
        ;; Send TON to recipient, please note that extra transferred TON will be stored in this contract
        send_ton(recipient, ton_amount);
        
        return ();
    }

    throw(0xffff); ;; Throw on unknown op
}

;; Get methods
slice get_pyth_address() method_id {
    load_data();
    return ctx_pyth_address;
}