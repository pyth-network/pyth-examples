;; common
const int CONST::WORKCHAIN = 0;

const int CONST::PUBLISH_GAP = 10;      ;; 10 seconds
const int CONST::MAX_STALENESS = 180;   ;; 180 seconds

;; internal
const int CONST::INTERNAL_PRICE_SCALE = 1000000000;


;; message modes
;;; x = 64 is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message.
const int SENDMODE::CARRY_ALL_REMAINING_MESSAGE_VALUE = 64;
;;; x = 128 is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message).
const int SENDMODE::CARRY_ALL_BALANCE = 128;

;; reserve
;;; Creates an output action which would reserve exactly x nanograms (if y = 0).
const int RESERVE::REGULAR = 0;
;;; Creates an output action which would reserve at most x nanograms (if y = 2).
;;; Bit +2 in y means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved.
const int RESERVE::AT_MOST = 2;
;;; in the case of action fail - bounce transaction. No effect if RESERVE_AT_MOST (+2) is used. TVM UPGRADE 2023-07.
const int RESERVE::BOUNCE_ON_ACTION_FAIL = 16;
;;; Creates an output action which would reserve all the remaining balance of the current smart contract (instead of the value originally indicated in the message).
const int RESERVE::APPEND_BALANCE = 4;


const int FEE::SUPPLY_MARGIN = 100000000; ;; 0.1 TON margin